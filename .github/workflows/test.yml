name: testing
on:
  push:
    branches: [ main ]
    paths:
      - torchview/**
      - .github/**
      - pyproject.toml
  pull_request:
    branches: [ main ]

env:
  UV_SYSTEM_PYTHON: 1

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      ID_LIST: ${{ steps.configure.outputs.ID_LIST }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: 3.12
      # dont use below since it has a bug, see the link below
      # - name: Set up Python
      #   # see here for the preview feature, https://github.com/astral-sh/uv/issues/6067
      #   # this install python globally
      #   run: uv python install --preview

      - uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Configure
        id: configure
        run: |
          ID_LIST=$(uv run scripts/get_version.py 0 --variable-name=ids)
          echo "ID_LIST=$ID_LIST" >> $GITHUB_OUTPUT

  tests:
    needs: configure
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        graphviz-version: ["0.20"]
        id-number: ${{fromJson(needs.configure.outputs.ID_LIST)}}
    steps:
    - uses: actions/checkout@v3.1.0
    - name: Set up version variables
      id: set-version
      run: |
        ls
        PYTHON_VERSION=$(python scripts/get_version.py ${{ matrix.id-number }} --variable-name=python)
        echo "PYTHON_VERSION=$PYTHON_VERSION" >> $GITHUB_OUTPUT
        TORCH_VERSION=$(python scripts/get_version.py ${{ matrix.id-number }} --variable-name=torch)
        echo "TORCH_VERSION=$TORCH_VERSION" >> $GITHUB_OUTPUT
        TORCHVISION_VERSION=$(python scripts/get_version.py ${{ matrix.id-number }} --variable-name=torchvision)
        echo "TORCHVISION_VERSION=$TORCHVISION_VERSION" >> $GITHUB_OUTPUT
        TORCHTEXT_VERSION=$(python scripts/get_version.py ${{ matrix.id-number }} --variable-name=torchtext)
        echo "TORCHTEXT_VERSION=$TORCHTEXT_VERSION" >> $GITHUB_OUTPUT
    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "::group::Run sudo apt-get update"
          sudo apt-get update
          echo "::endgroup::"
          echo "::group::Run sudo apt-get install graphviz"
          sudo apt-get install graphviz
        elif [ "$RUNNER_OS" == "macOS" ]; then
          echo "::group::Run brew install graphviz"
          brew install graphviz
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "::group::Run choco install graphviz"
          choco install graphviz
        else
          echo "$RUNNER_OS not supported"
          exit 1
        echo "::endgroup::"
        fi
        echo "::group:: check dot version"
        DOT_VERSION="$(dot -V 2>&1)"
        echo "::notice::dot installed ${DOT_VERSION#dot - }"
        echo "::endgroup::"
      shell: bash
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"
        python-version: ${{ steps.set-version.outputs.PYTHON_VERSION }}
    - name: Allow uv to use the system Python by default
      run: echo "UV_SYSTEM_PYTHON=1" >> $GITHUB_ENV
    # - name: Set up Python
    #   run: uv python install --preview

    - uses: actions/setup-python@v5
      with:
        python-version: ${{ steps.set-version.outputs.PYTHON_VERSION }}

    - name: Pip install python dependencies
      run: |
        uv pip install mypy pytest pytest-cov
        uv pip install graphviz~=${{ matrix.graphviz-version }}
        uv pip install torch~=${{ steps.set-version.outputs.TORCH_VERSION }} \
          torchvision~=${{ steps.set-version.outputs.TORCHVISION_VERSION }} \
          torchtext~=${{ steps.set-version.outputs.TORCHTEXT_VERSION }}
        if [ ${{steps.set-version.outputs.TORCH_VERSION}} >= '1.13' ]; then
          uv pip install transformers
          uv pip install sentencepiece
        fi
        
      shell: bash
    - name: mypy
      if: ${{ steps.set-version.outputs.PYTHON_VERSION == '3.12' }}
      run: |
        uv run mypy .
    - name: pytest
      if: ${{ steps.set-version.outputs.PYTHON_VERSION == '3.12' }}
      run: |
        uv run pytest --cov=torchview --cov-report= --durations=0
    - name: pytest
      if: ${{ steps.set-version.outputs.PYTHON_VERSION != '3.12' }}
      run: |
        uv run pytest --no-output
    - name: codecov
      uses: codecov/codecov-action@v3.1.1
